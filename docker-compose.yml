version: "3.8"

services:
  app:
    build: .
    volumes:
      - .:/app
    environment:
      - PYTHONDONTWRITEBYTECODE=1 # Don't create .pyc files
      - TERM=xterm-256color
      - FORCE_COLOR=1
      - COLORTERM=truecolor
      - PYTHONUNBUFFERED=1 # Unbuffered output
      - DATABASE_URL=postgresql://user:password@db:5432/twitter_db
      - API_KEY=${API_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - BEARER_TOKEN=${BEARER_TOKEN}
    ports:
      - "8000:8000" # Added port for FastAPI
    command: uvicorn app.api.main:app --host 0.0.0.0 --port 8000 --reload # Changed command to run FastAPI
    depends_on:
      - db
    networks:
      - app-network
  # healthcheck:
  #       test: ["CMD", "ps", "aux", "|", "grep", "python main.py", "|", "grep", "-v", "grep"]
  #       interval: 30s
  #       timeout: 10s
  #       retries: 3
  #       start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    user: "${UID}:${GID}"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000 # FastAPI endpoint
    command: npm run dev
    depends_on:
      - app
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=twitter_db
    ports:
      - "5432:5432"
    networks:
      - app-network
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U user -d twitter_db"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
